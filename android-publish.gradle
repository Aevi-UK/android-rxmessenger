apply plugin: 'maven-publish'

configurations {
    javadoc_extra_jars
}

dependencies {
    javadoc_extra_jars "${domainDependencies.rxJava}@jar", "${domainDependencies.gson}@jar"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    failOnError = false
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += files(configurations.javadoc_extra_jars.files)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task releaseJar(type: Jar) {
    from "${project.buildDir}/intermediates/classes/release/"
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives releaseJar
}

publishing {
    publications {
        rxMessenger(MavenPublication) {
            groupId group
            artifactId "${artifactId}"
            version version

            artifact releaseJar
            artifact bundleRelease
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // List all api dependencies and write to POM
                configurations.api.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
}